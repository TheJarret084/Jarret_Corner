:root{
  --max-w: 1000px;
  --accent: #3b3bb0;
  --accent-2: #44ff88;
  --bg: #1a1a2e;
  --panel: rgba(40,40,60,0.55);
}

*{box-sizing:border-box}
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--bg);
    color: #fff;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 14px;
    margin: 0;
    -webkit-font-smoothing:antialiased;
    -webkit-touch-callout: none;
}

header{ width:100%; max-width:var(--max-w); margin-bottom:10px }
h1 {
    margin: 6px 0 14px 0;
    font-size: 1.8rem;
    text-align: center;
}

/* Containers */
main#app{ width:100%; max-width:var(--max-w); display:flex; gap:14px; flex-direction:column; }
.preview-container { 
    background-color: var(--panel);
    border-radius: 12px;
    border: 1px solid rgba(255,255,255,0.06);
    padding: 12px;
    box-shadow: 0 6px 20px rgba(0,0,0,0.45);
}

/* Controls */
#controls { display:flex; flex-direction:column; gap:10px; }

.control-row { display:flex; gap:10px; align-items:center; justify-content:space-between; flex-wrap:wrap; }
.control-row.small { font-size: 0.95rem; color: #d0d0e0; }

/* Buttons */
button {
    padding: 12px 16px;
    margin: 4px 0;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    font-size: 1rem;
    transition: transform 0.12s ease, background-color 0.18s;
    display:inline-flex;
    align-items:center;
    justify-content:center;
    gap:8px;
}

button.large{ padding:14px 18px; font-size:1.05rem; border-radius:14px; min-height:48px; min-width:120px; }
button.primary { background: linear-gradient(180deg,var(--accent),#2a2a89); color: #fff; box-shadow: 0 8px 24px rgba(59,59,176,0.12); }
button.secondary { background: linear-gradient(180deg,#444466,#2c2c4a); color: #fff; }
button.ghost { background: transparent; border: 1px dashed rgba(255,255,255,0.08); color: #ddd; }
button.danger { background: linear-gradient(180deg,#b04444,#8a3333); color: #fff; }

button:active { transform: translateY(1px); }
button[disabled] { opacity: 0.45; pointer-events: none; transform: none; }

/* Grouping */
.btn-group { display:flex; gap:8px; align-items:center; }

/* Slider */
.slider-label { display:flex; gap:10px; align-items:center; }
input[type="range"] { width: 160px; height: 28px; -webkit-appearance: none; background: transparent; }
input[type="range"]::-webkit-slider-thumb { -webkit-appearance: none; width: 18px; height: 18px; border-radius:50%; background:var(--accent); box-shadow:0 2px 6px rgba(0,0,0,0.3); }
input[type="range"]::-webkit-slider-runnable-track { height: 6px; background: rgba(255,255,255,0.08); border-radius:6px; }

/* Status */
#status-text { margin-top: 6px; text-align: left; font-size: 0.95rem; color: #d0d0e0; }

/* Loader */
#loaderContainer {
    width: 100%;
    height: 10px;
    background-color: rgba(255,255,255,0.04);
    border-radius: 6px;
    margin-top: 10px;
    overflow: hidden;
}
#loaderBar {
    width: 0%;
    height: 100%;
    background: linear-gradient(90deg,var(--accent-2),#22cc66);
    transition: width 0.25s ease;
    box-shadow: inset 0 -6px 12px rgba(0,0,0,0.25);
}

/* Canvas */
#shaderCanvas {
    width: 100%;
    height: 56vw; /* responsive height */
    max-height: 640px;
    border-radius: 8px;
    background: #000;
    display:block;
}

/* Shader list */
.shader-list { list-style: none; padding: 6px; margin: 0; display: flex; gap: 8px; flex-wrap: wrap; }
.shader-item {
    background: rgba(0,0,0,0.25);
    border: 1px solid rgba(255,255,255,0.04);
    padding: 10px;
    border-radius: 10px;
    min-width: 160px;
    display:flex;
    flex-direction:column;
    gap:8px;
}
.shader-item .s-title { font-weight:600; color:#fff; font-size:0.95rem; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; }
.shader-item .s-actions { display:flex; gap:6px; justify-content:space-between; flex-wrap:wrap; }

/* Code box */
.code-box {
    background: rgba(0,0,0,0.6);
    border-radius: 8px;
    padding: 10px;
    max-height: 240px;
    overflow: auto;
    font-family: monospace;
    color: #e8e8e8;
    font-size: 0.9rem;
}

/* Footer */
footer { margin-top: 18px; width: 100%; max-width: var(--max-w); text-align:center; padding:12px; }

/* Responsivo: mobile friendly layout adjustments */
@media (max-width: 768px) {
    main#app{ gap:12px; }
    .mobile-stack { flex-direction: column; gap:8px; align-items:stretch; }
    input[type="range"]{ width:100%; }
    #shaderCanvas { height: 62vw; }
    .shader-item{ min-width: 45%; }
}

@media (max-width: 420px){
    h1 { font-size: 1.3rem; }
    button.large{ min-width:100%; padding:12px; }
    .shader-item{ min-width: 100%; }
    .control-row { gap:8px; }
    #shaderCanvas { height: 72vw; }
}
/*

# El Shader-inador

Proyecto para aplicar fragment shaders sobre imágenes en el navegador usando Three.js.
Preparado para desplegar en GitHub Pages.

## Archivos
- `index.html` - UI y canvas
- `El_Shader-inador.css` - estilos
- `ui.js` - punto de entrada, eventos UI
- `shaders.js` - Three.js, compilación y render
- `files.js` - carga de imágenes y shaders
- `test.frag` - shader de prueba

## Uso
1. Subir una imagen (local).
2. Subir `test.frag` o cualquier shader `.frag`.
3. Seleccionar / Probar / Aplicar shader.
4. Ajustar intensidad y descargar PNG.

**Nota**: las imágenes cargadas vía input de archivos no taintarán el canvas; si usas imágenes remotas, asegúrate de que permitan CORS, o el PNG exportado puede fallar.

## Deploy en GitHub Pages
- Crea un repo y sube los archivos.
- En Settings → Pages, selecciona la rama y carpeta (`/root` o `/docs`) y guarda.

*/